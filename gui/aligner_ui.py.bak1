#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 12, 2021 03:27:20 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import aligner_ui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Aligner (root)
    aligner_ui_support.init(root, top)
    root.mainloop()

w = None
def create_Aligner(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Aligner(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Aligner (w)
    aligner_ui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Aligner():
    global w
    w.destroy()
    w = None

class Aligner:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1091x490+268+102")
        top.minsize(120, 1)
        top.maxsize(1284, 781)
        top.resizable(1,  1)
        top.title("Tkaligner")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.FramePad = tk.Frame(top)
        self.FramePad.place(relx=0.0, rely=0.0, relheight=0.5, relwidth=1.0)
        self.FramePad.configure(relief='groove')
        self.FramePad.configure(borderwidth="2")
        self.FramePad.configure(relief="groove")
        self.FramePad.configure(background="#d9d9d9")
        self.FramePad.configure(highlightbackground="#d9d9d9")
        self.FramePad.configure(highlightcolor="black")

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.PNotebook1 = ttk.Notebook(self.FramePad)
        self.PNotebook1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook1.configure(takefocus="")
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(0, text="Page 1",compound="left",underline="-1",)
        self.PNotebook1_t1.configure(background="#d9d9d9")
        self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t1.configure(highlightcolor="black")
        self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t2, padding=3)
        self.PNotebook1.tab(1, text="Page 2",compound="left",underline="-1",)
        self.PNotebook1_t2.configure(background="#d9d9d9")
        self.PNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t2.configure(highlightcolor="black")
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

        self.menubar = tk.Menu(top, font="-family {Segoe UI} -size 9", bg=_bgcolor
                ,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                font="-family {Segoe UI} -size 9",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.open1_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="Open1",
                underline=0)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.open2_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="Open2",
                underline=1)
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.savetsv_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="SaveCsv",
                underline=4)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.savetmx_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="SaveTMX",
                underline=5)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.savexlsx_command,
                font="-family {Segoe UI} -size 9",
                foreground="#000000",
                label="SaveXlsx",
                underline=7)
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=aligner_ui_support.quit_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="Quit",
                underline=0)
        self.sub_menu1 = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                font="-family {Segoe UI} -size 9",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="Edit")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+P",
                background="#d9d9d9",
                command=aligner_ui_support.palign_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="PAlign",
                underline=0)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+S",
                background="#d9d9d9",
                command=aligner_ui_support.salign_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="SAlign",
                underline=0)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+R",
                background="#d9d9d9",
                command=aligner_ui_support.reset_command,
                font="TkDefaultFont",
                foreground="#000000",
                label="Reset",
                underline=0)
        self.sub_menu12 = tk.Menu(top,
                activebackground="#f9f9f9",
                activeborderwidth=1,
                activeforeground="black",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                font="-family {Segoe UI} -size 9",
                foreground="black",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="Help")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+H",
                background="#d9d9d9",
                command=aligner_ui_support.on_howto,
                font="TkDefaultFont",
                foreground="#000000",
                label="Howto",
                underline=0)
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl-I",
                background="#d9d9d9",
                command=aligner_ui_support.on_about,
                font="TkDefaultFont",
                foreground="#000000",
                label="About",
                underline=0)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

if __name__ == '__main__':
    vp_start_gui()





